require "nvchad.options"

-- add yours here!

-- local o = vim.o
-- o.cursorlineopt ='both' -- to enable cursorline!


-- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–Ω–∞–∫–∏ (icons) –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
local signs = {
  Error = "‚úñ",  -- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: "‚õî", "‚ùå", "üö´"
  Warn  = "‚ö†",  -- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: "‚ùó", "üî∂", "üü†"
  Hint  = "üí°",  -- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: "üîç", "‚ú®", "üõà"
  Info  = "‚Ñπ",  -- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: "üìò", "üõà", "üîµ"
}
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ .vue
vim.cmd([[ autocmd FileType vue setlocal commentstring=<!--\ %s\ --> ]])

-- –ù–æ–º–µ–Ω–∞ —Å—Ç—Ä–æ–∫
vim.wo.number = true
vim.wo.relativenumber = true

-- –ú—ã—à—å
vim.opt.mouse = "a"
vim.opt.mousefocus = true

-- –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
vim.opt.clipboard = "unnamedplus"

-- –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ –≤ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
vim.opt.wrap = true 

-- –û—Ç—Å—Ç—É–ø—ã
vim.opt.shiftwidth = 2
vim.opt.tabstop = 2
vim.opt.softtabstop = 2

-- –î—Ä—É–≥–æ–µ
vim.opt.scrolloff = 8
vim.opt.wrap = false
vim.opt.termguicolors = true
vim.opt.fillchars = {
	vert = "‚îÇ",
	fold = "‚†Ä",
	eob = " ", -- suppress ~ at EndOfBuffer
	-- diff = "‚£ø", -- alternatives = ‚£ø ‚ñë ‚îÄ ‚ï±
	msgsep = "‚Äæ",
	foldopen = "‚ñº",
	foldsep = "‚îÇ",
	foldclose = "‚ùØ"
}

vim.o.hlsearch = true  -- –ü–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞

--=============================================================================
-- –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç
local function is_port_free(port)
  local handle = io.popen("lsof -i:" .. port)
  local result = handle:read("*a")
  handle:close()
  return result == ""
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ
local function get_next_available_port(start_port)
  local port = start_port
  while not is_port_free(port) do
    port = port + 1
  end
  return port
end

-- –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
local function run_dev(open_browser, custom_port)
  local port = custom_port or 3000

  -- –ó–∞–ø—É—Å–∫ npm run dev –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
  local term_buf = vim.api.nvim_create_buf(false, true)
  vim.api.nvim_open_term(term_buf, {})
  vim.fn.jobstart("npm run dev -- --port=" .. port, { detach = true })

  -- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
  vim.defer_fn(function()
    -- –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    vim.notify("–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:" .. port, vim.log.levels.INFO)

    -- –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if open_browser then
      vim.fn.jobstart("open http://localhost:" .. port, { detach = true })
    end
    
    vim.api.nvim_buf_delete(term_buf, { force = true })
  end, 3000)
end

-- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø–æ—Ä—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å 3000
vim.api.nvim_create_user_command('Dev', function()
  local next_port = get_next_available_port(3000)
  run_dev(true, next_port)
end, {})

--=============================================================================
-- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
local function kill_port(port)
  local handle = io.popen("lsof -ti tcp:" .. port)
  local result = handle:read("*a")
  handle:close()

  -- –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ
  if result ~= "" then
    vim.fn.jobstart("lsof -ti tcp:" .. port .. " | xargs kill", { detach = true })
    vim.notify("–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É " .. port .. " –∑–∞–∫—Ä—ã—Ç", vim.log.levels.INFO)
  else
    -- –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ –∑–∞–Ω—è—Ç
    vim.notify("–ü–æ—Ä—Ç " .. port .. " –Ω–µ –∑–∞–Ω—è—Ç", vim.log.levels.INFO)
  end
end

-- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ node
vim.api.nvim_create_user_command('DK', function()
  vim.fn.jobstart("killall node", { detach = true })
  vim.notify("–í—Å–µ localhost –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–∫—Ä—ã—Ç—ã", vim.log.levels.INFO)
end, {})

-- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Ä—Ç—É
vim.api.nvim_create_user_command('DKP', function(opts)
  local port = opts.args
  if port and tonumber(port) then
    kill_port(port)
  else
    vim.notify("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞", vim.log.levels.ERROR)
  end
end, { nargs = 1 })

--=============================================================================
-- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ 3000
vim.api.nvim_create_user_command('DL', function()
  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º lsof –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 3000
  local handle = io.popen("lsof -i -P -n | grep LISTEN | grep ':300' | awk -F: '{print $2}' | awk '{print $1}'")
  local result = handle:read("*a")
  handle:close()

  -- –ï—Å–ª–∏ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö
  if result ~= "" then
    vim.notify("–ó–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã: " .. result, vim.log.levels.INFO)
  else
    vim.notify("–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤", vim.log.levels.INFO)
  end
end, {})

--=============================================================================
-- –í–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
-- –¢–æ–ª—å–∫–æ –¥–ª—è 3000 –ø–æ—Ä—Ç–æ–≤

-- DevList - —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
-- DK (DevsKill) - –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ—Ä—Ç—ã
-- DKP (DevsKillPort 3000) -- –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç –ø–æ –Ω–æ–º–µ—Ä—É
-- Dev - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä
